[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-prompt-generator-backend"
version = "0.1.0"
description = "Backend API for AI System Prompt Generator"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "AI Prompt Generator Team"}
]
keywords = ["fastapi", "ai", "prompts", "api"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
]

dependencies = [
    "fastapi>=0.104.1,<1.0.0",
    "uvicorn[standard]>=0.24.0,<1.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "httpx>=0.25.2,<1.0.0",
    "python-multipart>=0.0.6,<1.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "sqlalchemy>=2.0.23,<3.0.0",
    "aiomysql>=0.2.0,<1.0.0",
    "alembic>=1.13.0,<2.0.0",
    "click>=8.1.0,<9.0.0",
    "dashscope>=1.24.6,<2.0.0",
    "aioredis>=2.0.0,<3.0.0",
    # LangChain framework for agent orchestration
    "langchain>=0.1.0,<1.0.0",
    "langchain-core>=0.1.0,<1.0.0",
    "langchain-community>=0.0.1,<1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3,<8.0.0",
    "pytest-asyncio>=0.21.1,<1.0.0",
    "pytest-httpx>=0.26.0,<1.0.0",
    "black>=23.11.0,<24.0.0",
    "isort>=5.12.0,<6.0.0",
    "flake8>=6.1.0,<7.0.0",
    "mypy>=1.7.1,<2.0.0",
    "pre-commit>=3.6.0,<4.0.0",
]

[project.urls]
Homepage = "https://github.com/kongsiyu/prompt-sphere"
Repository = "https://github.com/kongsiyu/prompt-sphere"
Issues = "https://github.com/kongsiyu/prompt-sphere/issues"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["app", "tests"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
markers = [
    "unit: Unit tests (no external dependencies)",
    "api: API-related tests",
    "database: Database integration tests",
    "slow: Slow-running tests",
    "integration: Integration tests"
]
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]